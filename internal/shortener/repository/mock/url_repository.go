// Code generated by MockGen. DO NOT EDIT.
// Source: url_repository_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/anoriar/shortener/internal/shortener/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepositoryInterface is a mock of URLRepositoryInterface interface.
type MockURLRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryInterfaceMockRecorder
}

// MockURLRepositoryInterfaceMockRecorder is the mock recorder for MockURLRepositoryInterface.
type MockURLRepositoryInterfaceMockRecorder struct {
	mock *MockURLRepositoryInterface
}

// NewMockURLRepositoryInterface creates a new mock instance.
func NewMockURLRepositoryInterface(ctrl *gomock.Controller) *MockURLRepositoryInterface {
	mock := &MockURLRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepositoryInterface) EXPECT() *MockURLRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddURL mocks base method.
func (m *MockURLRepositoryInterface) AddURL(url *entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURL", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURL indicates an expected call of AddURL.
func (mr *MockURLRepositoryInterfaceMockRecorder) AddURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*MockURLRepositoryInterface)(nil).AddURL), url)
}

// AddURLBatch mocks base method.
func (m *MockURLRepositoryInterface) AddURLBatch(ctx context.Context, urls []entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLBatch", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLBatch indicates an expected call of AddURLBatch.
func (mr *MockURLRepositoryInterfaceMockRecorder) AddURLBatch(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLBatch", reflect.TypeOf((*MockURLRepositoryInterface)(nil).AddURLBatch), ctx, urls)
}

// FindURLByShortURL mocks base method.
func (m *MockURLRepositoryInterface) FindURLByShortURL(shortURL string) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindURLByShortURL", shortURL)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindURLByShortURL indicates an expected call of FindURLByShortURL.
func (mr *MockURLRepositoryInterfaceMockRecorder) FindURLByShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindURLByShortURL", reflect.TypeOf((*MockURLRepositoryInterface)(nil).FindURLByShortURL), shortURL)
}
